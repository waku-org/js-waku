/* Generated by the Nim Compiler v2.2.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI134217745 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null
};
var NTI134217749 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null
};
var NTI134217751 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null
};
var NTI134217743 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null
};
var NTI33555167 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null
};
var NTI33555175 = {
  size: 0,
  kind: 22,
  base: null,
  node: null,
  finalizer: null
};
var NTI33554449 = {
  size: 0,
  kind: 28,
  base: null,
  node: null,
  finalizer: null
};
var NTI33554450 = {
  size: 0,
  kind: 29,
  base: null,
  node: null,
  finalizer: null
};
var NTI33555174 = {
  size: 0,
  kind: 22,
  base: null,
  node: null,
  finalizer: null
};
var NTI33555171 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null
};
var NTI33555172 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null
};
var NTI134217741 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null
};
var NTI134217742 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null
};
var NNI134217742 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: []
};
NTI134217742.node = NNI134217742;
var NNI134217741 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: []
};
NTI134217741.node = NNI134217741;
var NNI33555172 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: []
};
NTI33555172.node = NNI33555172;
NTI33555174.base = NTI33555171;
NTI33555175.base = NTI33555171;
var NNI33555171 = {
  kind: 2,
  len: 5,
  offset: 0,
  typ: null,
  name: null,
  sons: [
    {
      kind: 1,
      offset: "parent",
      len: 0,
      typ: NTI33555174,
      name: "parent",
      sons: null
    },
    {
      kind: 1,
      offset: "name",
      len: 0,
      typ: NTI33554450,
      name: "name",
      sons: null
    },
    {
      kind: 1,
      offset: "message",
      len: 0,
      typ: NTI33554449,
      name: "msg",
      sons: null
    },
    {
      kind: 1,
      offset: "trace",
      len: 0,
      typ: NTI33554449,
      name: "trace",
      sons: null
    },
    { kind: 1, offset: "up", len: 0, typ: NTI33555175, name: "up", sons: null }
  ]
};
NTI33555171.node = NNI33555171;
var NNI33555167 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: []
};
NTI33555167.node = NNI33555167;
NTI33555171.base = NTI33555167;
NTI33555172.base = NTI33555171;
NTI134217741.base = NTI33555172;
NTI134217742.base = NTI134217741;
var NNI134217743 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: []
};
NTI134217743.node = NNI134217743;
NTI134217743.base = NTI134217741;
var NNI134217751 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: []
};
NTI134217751.node = NNI134217751;
NTI134217751.base = NTI33555172;
var NNI134217749 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: []
};
NTI134217749.node = NNI134217749;
NTI134217749.base = NTI33555172;
var NNI134217745 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: []
};
NTI134217745.node = NNI134217745;
NTI134217745.base = NTI33555172;

function toJSStr(s_p0) {
  var result_33556911 = null;

  var res_33556965 = newSeq__system_u2508(s_p0.length);
  var i_33556966 = 0;
  var j_33556967 = 0;
  {
    Label2: while (true) {
      if (!(i_33556966 < s_p0.length)) break Label2;
      var c_33556968 = s_p0[i_33556966];
      if (c_33556968 < 128) {
        res_33556965[j_33556967] = String.fromCharCode(c_33556968);
        i_33556966 += 1;
      } else {
        var helper_33556994 = newSeq__system_u2508(0);
        Label3: {
          Label4: while (true) {
            if (!true) break Label4;
            var code_33556995 = c_33556968.toString(16);
            if ((code_33556995 == null ? 0 : code_33556995.length) == 1) {
              helper_33556994.push("%0");
            } else {
              helper_33556994.push("%");
            }

            helper_33556994.push(code_33556995);
            i_33556966 += 1;
            if (s_p0.length <= i_33556966 || s_p0[i_33556966] < 128) {
              break Label3;
            }

            c_33556968 = s_p0[i_33556966];
          }
        }
        ++excHandler;
        try {
          res_33556965[j_33556967] = decodeURIComponent(
            helper_33556994.join("")
          );
          --excHandler;
        } catch (EXCEPTION) {
          var prevJSError = lastJSError;
          lastJSError = EXCEPTION;
          --excHandler;
          res_33556965[j_33556967] = helper_33556994.join("");
          lastJSError = prevJSError;
        } finally {
        }
      }

      j_33556967 += 1;
    }
  }
  if (res_33556965.length < j_33556967) {
    for (var i = res_33556965.length; i < j_33556967; ++i)
      res_33556965.push(null);
  } else {
    res_33556965.length = j_33556967;
  }
  result_33556911 = res_33556965.join("");

  return result_33556911;
}

function raiseException(e_p0, ename_p1) {
  e_p0.name = ename_p1;
  if (excHandler == 0) {
    unhandledException(e_p0);
  }

  throw e_p0;
}

function modInt(a_p0, b_p1) {
  if (b_p1 == 0) raiseDivByZero();
  if (b_p1 == -1 && a_p0 == 2147483647) raiseOverflow();
  return Math.trunc(a_p0 % b_p1);
}

function absInt(a_p0) {
  var Temporary1;

  var result_33557134 = 0;

  if (a_p0 < 0) {
    Temporary1 = a_p0 * -1;
  } else {
    Temporary1 = a_p0;
  }

  result_33557134 = Temporary1;

  return result_33557134;
}

function divInt(a_p0, b_p1) {
  if (b_p1 == 0) raiseDivByZero();
  if (b_p1 == -1 && a_p0 == 2147483647) raiseOverflow();
  return Math.trunc(a_p0 / b_p1);
}

function mulInt(a_p0, b_p1) {
  var result = a_p0 * b_p1;
  checkOverflowInt(result);
  return result;
}

function subInt(a_p0, b_p1) {
  var result = a_p0 - b_p1;
  checkOverflowInt(result);
  return result;
}

function addInt(a_p0, b_p1) {
  var result = a_p0 + b_p1;
  checkOverflowInt(result);
  return result;
}

function mnewString(len_p0) {
  var result = new Array(len_p0);
  for (var i = 0; i < len_p0; i++) {
    result[i] = 0;
  }
  return result;
}

function chckRange(i_p0, a_p1, b_p2) {
  var result_33557358 = 0;

  BeforeRet: {
    if (a_p1 <= i_p0 && i_p0 <= b_p2) {
      result_33557358 = i_p0;
      break BeforeRet;
    } else {
      raiseRangeError();
    }
  }

  return result_33557358;
}

function setConstr() {
  var result = {};
  for (var i = 0; i < arguments.length; ++i) {
    var x = arguments[i];
    if (typeof x == "object") {
      for (var j = x[0]; j <= x[1]; ++j) {
        result[j] = true;
      }
    } else {
      result[x] = true;
    }
  }
  return result;
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_p0, src_p1, ti_p2) {
  var result_33557318 = null;

  switch (ti_p2.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!isFatPointer__system_u2866(ti_p2)) {
        result_33557318 = src_p1;
      } else {
        result_33557318 = [src_p1[0], src_p1[1]];
      }

      break;
    case 19:
      if (dest_p0 === null || dest_p0 === undefined) {
        dest_p0 = {};
      } else {
        for (var key in dest_p0) {
          delete dest_p0[key];
        }
      }
      for (var key in src_p1) {
        dest_p0[key] = src_p1[key];
      }
      result_33557318 = dest_p0;

      break;
    case 18:
    case 17:
      if (!(ti_p2.base == null)) {
        result_33557318 = nimCopy(dest_p0, src_p1, ti_p2.base);
      } else {
        if (ti_p2.kind == 17) {
          result_33557318 =
            dest_p0 === null || dest_p0 === undefined
              ? { m_type: ti_p2 }
              : dest_p0;
        } else {
          result_33557318 =
            dest_p0 === null || dest_p0 === undefined ? {} : dest_p0;
        }
      }
      nimCopyAux(result_33557318, src_p1, ti_p2.node);
      break;
    case 4:
    case 16:
      if (ArrayBuffer.isView(src_p1)) {
        if (
          dest_p0 === null ||
          dest_p0 === undefined ||
          dest_p0.length != src_p1.length
        ) {
          dest_p0 = new src_p1.constructor(src_p1);
        } else {
          dest_p0.set(src_p1, 0);
        }
        result_33557318 = dest_p0;
      } else {
        if (src_p1 === null) {
          result_33557318 = null;
        } else {
          if (
            dest_p0 === null ||
            dest_p0 === undefined ||
            dest_p0.length != src_p1.length
          ) {
            dest_p0 = new Array(src_p1.length);
          }
          result_33557318 = dest_p0;
          for (var i = 0; i < src_p1.length; ++i) {
            result_33557318[i] = nimCopy(
              result_33557318[i],
              src_p1[i],
              ti_p2.base
            );
          }
        }
      }

      break;
    case 24:
    case 27:
      if (src_p1 === null) {
        result_33557318 = null;
      } else {
        if (
          dest_p0 === null ||
          dest_p0 === undefined ||
          dest_p0.length != src_p1.length
        ) {
          dest_p0 = new Array(src_p1.length);
        }
        result_33557318 = dest_p0;
        for (var i = 0; i < src_p1.length; ++i) {
          result_33557318[i] = nimCopy(
            result_33557318[i],
            src_p1[i],
            ti_p2.base
          );
        }
      }

      break;
    case 28:
      if (src_p1 !== null) {
        result_33557318 = src_p1.slice(0);
      }

      break;
    default:
      result_33557318 = src_p1;
      break;
  }

  return result_33557318;
}

function chckIndx(i_p0, a_p1, b_p2) {
  var result_33557353 = 0;

  BeforeRet: {
    if (a_p1 <= i_p0 && i_p0 <= b_p2) {
      result_33557353 = i_p0;
      break BeforeRet;
    } else {
      raiseIndexError(i_p0, a_p1, b_p2);
    }
  }

  return result_33557353;
}
var objectID_671088817 = [0];

function add__system_u1943(x_p0, x_p0_Idx, y_p1) {
  if (x_p0[x_p0_Idx] === null) {
    x_p0[x_p0_Idx] = [];
  }
  var off = x_p0[x_p0_Idx].length;
  x_p0[x_p0_Idx].length += y_p1.length;
  for (var i = 0; i < y_p1.length; ++i) {
    x_p0[x_p0_Idx][off + i] = y_p1.charCodeAt(i);
  }
}

function newSeq__system_u2508(len_p0) {
  var result_33556944 = [];

  result_33556944 = new Array(len_p0);
  for (var i = 0; i < len_p0; ++i) {
    result_33556944[i] = null;
  }
  return result_33556944;
}

function unhandledException(e_p0) {
  var buf_33556659 = [[]];
  if (!(e_p0.message.length == 0)) {
    buf_33556659[0].push.apply(
      buf_33556659[0],
      [
        69, 114, 114, 111, 114, 58, 32, 117, 110, 104, 97, 110, 100, 108, 101,
        100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110, 58, 32
      ]
    );
    buf_33556659[0].push.apply(buf_33556659[0], e_p0.message);
  } else {
    buf_33556659[0].push.apply(
      buf_33556659[0],
      [
        69, 114, 114, 111, 114, 58, 32, 117, 110, 104, 97, 110, 100, 108, 101,
        100, 32, 101, 120, 99, 101, 112, 116, 105, 111, 110
      ]
    );
  }

  buf_33556659[0].push.apply(buf_33556659[0], [32, 91]);
  add__system_u1943(buf_33556659, 0, e_p0.name);
  buf_33556659[0].push.apply(buf_33556659[0], [93, 10]);
  var cbuf_33556660 = toJSStr(buf_33556659[0]);
  if (typeof Error !== "undefined") {
    throw new Error(cbuf_33556660);
  } else {
    throw cbuf_33556660;
  }
}

function raiseDivByZero() {
  raiseException(
    {
      message: [
        100, 105, 118, 105, 115, 105, 111, 110, 32, 98, 121, 32, 122, 101, 114,
        111
      ],
      parent: null,
      m_type: NTI134217742,
      name: null,
      trace: [],
      up: null
    },
    "DivByZeroDefect"
  );
}

function raiseOverflow() {
  raiseException(
    {
      message: [
        111, 118, 101, 114, 45, 32, 111, 114, 32, 117, 110, 100, 101, 114, 102,
        108, 111, 119
      ],
      parent: null,
      m_type: NTI134217743,
      name: null,
      trace: [],
      up: null
    },
    "OverflowDefect"
  );
}

function checkOverflowInt(a_p0) {
  if (a_p0 > 2147483647 || a_p0 < -2147483648) raiseOverflow();
}

function raiseRangeError() {
  raiseException(
    {
      message: [
        118, 97, 108, 117, 101, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97,
        110, 103, 101
      ],
      parent: null,
      m_type: NTI134217751,
      name: null,
      trace: [],
      up: null
    },
    "RangeDefect"
  );
}

function addChars__stdZprivateZdigitsutils_u202(
  result_p0,
  result_p0_Idx,
  x_p1,
  start_p2,
  n_p3
) {
  var Temporary1;

  var old_301990096 = result_p0[result_p0_Idx].length;
  if (
    result_p0[result_p0_Idx].length <
    ((Temporary1 = chckRange(addInt(old_301990096, n_p3), 0, 2147483647)),
    Temporary1)
  ) {
    for (var i = result_p0[result_p0_Idx].length; i < Temporary1; ++i)
      result_p0[result_p0_Idx].push(0);
  } else {
    result_p0[result_p0_Idx].length = Temporary1;
  }
  {
    var iHEX60gensym4_301990110 = 0;
    var i_536870936 = 0;
    {
      Label4: while (true) {
        if (!(i_536870936 < n_p3)) break Label4;
        iHEX60gensym4_301990110 = i_536870936;
        result_p0[result_p0_Idx][
          chckIndx(
            addInt(old_301990096, iHEX60gensym4_301990110),
            0,
            result_p0[result_p0_Idx].length - 1
          )
        ] = x_p1.charCodeAt(
          chckIndx(
            addInt(start_p2, iHEX60gensym4_301990110),
            0,
            x_p1.length - 1
          )
        );
        i_536870936 = addInt(i_536870936, 1);
      }
    }
  }
}

function addChars__stdZprivateZdigitsutils_u198(
  result_p0,
  result_p0_Idx,
  x_p1
) {
  addChars__stdZprivateZdigitsutils_u202(
    result_p0,
    result_p0_Idx,
    x_p1,
    0,
    x_p1 == null ? 0 : x_p1.length
  );
}

function addInt__stdZprivateZdigitsutils_u223(result_p0, result_p0_Idx, x_p1) {
  addChars__stdZprivateZdigitsutils_u198(result_p0, result_p0_Idx, x_p1 + "");
}

function addInt__stdZprivateZdigitsutils_u241(result_p0, result_p0_Idx, x_p1) {
  addInt__stdZprivateZdigitsutils_u223(result_p0, result_p0_Idx, x_p1);
}

function HEX24__systemZdollars_u8(x_p0) {
  var result_385875978 = [[]];

  addInt__stdZprivateZdigitsutils_u241(result_385875978, 0, x_p0);

  return result_385875978[0];
}

function isFatPointer__system_u2866(ti_p0) {
  var result_33557300 = false;

  BeforeRet: {
    result_33557300 = !(ConstSet1[ti_p0.base.kind] != undefined);
    break BeforeRet;
  }

  return result_33557300;
}

function nimCopyAux(dest_p0, src_p1, n_p2) {
  switch (n_p2.kind) {
    case 0:
      break;
    case 1:
      dest_p0[n_p2.offset] = nimCopy(
        dest_p0[n_p2.offset],
        src_p1[n_p2.offset],
        n_p2.typ
      );

      break;
    case 2:
      for (var i = 0; i < n_p2.sons.length; i++) {
        nimCopyAux(dest_p0, src_p1, n_p2.sons[i]);
      }

      break;
    case 3:
      dest_p0[n_p2.offset] = nimCopy(
        dest_p0[n_p2.offset],
        src_p1[n_p2.offset],
        n_p2.typ
      );
      for (var i = 0; i < n_p2.sons.length; ++i) {
        nimCopyAux(dest_p0, src_p1, n_p2.sons[i][1]);
      }

      break;
  }
}

function raiseIndexError(i_p0, a_p1, b_p2) {
  var Temporary1;

  if (b_p2 < a_p1) {
    Temporary1 = [
      105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111,
      117, 110, 100, 115, 44, 32, 116, 104, 101, 32, 99, 111, 110, 116, 97, 105,
      110, 101, 114, 32, 105, 115, 32, 101, 109, 112, 116, 121
    ];
  } else {
    Temporary1 = [105, 110, 100, 101, 120, 32].concat(
      HEX24__systemZdollars_u8(i_p0),
      [32, 110, 111, 116, 32, 105, 110, 32],
      HEX24__systemZdollars_u8(a_p1),
      [32, 46, 46, 32],
      HEX24__systemZdollars_u8(b_p2)
    );
  }

  raiseException(
    {
      message: nimCopy(null, Temporary1, NTI33554449),
      parent: null,
      m_type: NTI134217749,
      name: null,
      trace: [],
      up: null
    },
    "IndexDefect"
  );
}

function imul__pureZhashes_u340(a_p0, b_p1) {
  var result_671088983 = 0;

  var mask_671088984 = 65535;
  var aHi_671088989 = ((a_p0 >>> 16) & mask_671088984) >>> 0;
  var aLo_671088990 = (a_p0 & mask_671088984) >>> 0;
  var bHi_671088995 = ((b_p1 >>> 16) & mask_671088984) >>> 0;
  var bLo_671088996 = (b_p1 & mask_671088984) >>> 0;
  result_671088983 =
    (((aLo_671088990 * bLo_671088996) >>> 0) +
      ((((((aHi_671088989 * bLo_671088996) >>> 0) +
        ((aLo_671088990 * bHi_671088995) >>> 0)) >>>
        0) <<
        16) >>>
        0)) >>>
    0;

  return result_671088983;
}

function rotl32__pureZhashes_u361(x_p0, r_p1) {
  var result_671089004 = 0;

  result_671089004 =
    (((x_p0 << r_p1) >>> 0) | (x_p0 >>> subInt(32, r_p1))) >>> 0;

  return result_671089004;
}

function murmurHash__pureZhashes_u373(x_p0) {
  var result_671089015 = 0;

  BeforeRet: {
    var size_671089024 = x_p0.length;
    var stepSize_671089025 = 4;
    var n_671089026 = divInt(size_671089024, stepSize_671089025);
    var h1_671089027 = 0;
    var i_671089028 = 0;
    {
      Label2: while (true) {
        if (!(i_671089028 < mulInt(n_671089026, stepSize_671089025)))
          break Label2;
        var k1_671089031 = 0;
        var jHEX60gensym11_671089048 = stepSize_671089025;
        {
          Label4: while (true) {
            if (!(0 < jHEX60gensym11_671089048)) break Label4;
            jHEX60gensym11_671089048 = subInt(jHEX60gensym11_671089048, 1);
            k1_671089031 =
              (((k1_671089031 << 8) >>> 0) |
                Number(
                  BigInt.asUintN(
                    32,
                    BigInt(
                      x_p0[
                        chckIndx(
                          addInt(i_671089028, jHEX60gensym11_671089048),
                          0,
                          x_p0.length - 1
                        )
                      ]
                    )
                  )
                )) >>>
              0;
          }
        }
        i_671089028 = addInt(i_671089028, stepSize_671089025);
        k1_671089031 = imul__pureZhashes_u340(k1_671089031, 3432918353);
        k1_671089031 = rotl32__pureZhashes_u361(k1_671089031, 15);
        k1_671089031 = imul__pureZhashes_u340(k1_671089031, 461845907);
        h1_671089027 = (h1_671089027 ^ k1_671089031) >>> 0;
        h1_671089027 = rotl32__pureZhashes_u361(h1_671089027, 13);
        h1_671089027 = (((h1_671089027 * 5) >>> 0) + 3864292196) >>> 0;
      }
    }
    var k1_671089066 = 0;
    var rem_671089067 = modInt(size_671089024, stepSize_671089025);
    {
      Label6: while (true) {
        if (!(0 < rem_671089067)) break Label6;
        rem_671089067 = subInt(rem_671089067, 1);
        k1_671089066 =
          (((k1_671089066 << 8) >>> 0) |
            Number(
              BigInt.asUintN(
                32,
                BigInt(
                  x_p0[
                    chckIndx(
                      addInt(i_671089028, rem_671089067),
                      0,
                      x_p0.length - 1
                    )
                  ]
                )
              )
            )) >>>
          0;
      }
    }
    k1_671089066 = imul__pureZhashes_u340(k1_671089066, 3432918353);
    k1_671089066 = rotl32__pureZhashes_u361(k1_671089066, 15);
    k1_671089066 = imul__pureZhashes_u340(k1_671089066, 461845907);
    h1_671089027 = (h1_671089027 ^ k1_671089066) >>> 0;
    h1_671089027 =
      (h1_671089027 ^ Number(BigInt.asUintN(32, BigInt(size_671089024)))) >>> 0;
    h1_671089027 = (h1_671089027 ^ (h1_671089027 >>> 16)) >>> 0;
    h1_671089027 = imul__pureZhashes_u340(h1_671089027, 2246822507);
    h1_671089027 = (h1_671089027 ^ (h1_671089027 >>> 13)) >>> 0;
    h1_671089027 = imul__pureZhashes_u340(h1_671089027, 3266489909);
    h1_671089027 = (h1_671089027 ^ (h1_671089027 >>> 16)) >>> 0;
    result_671089015 = Number(BigInt.asIntN(32, BigInt(h1_671089027)));
    break BeforeRet;
  }

  return result_671089015;
}

function hash__pureZhashes_u782(x_p0) {
  var result_671089424 = 0;

  result_671089424 = murmurHash__pureZhashes_u373(
    x_p0.slice(0, x_p0.length - 1 + 1)
  );

  return result_671089424;
}

function hashN__nim95hash_u2(item_p0, n_p1, maxValue_p2) {
  var result_536870918 = 0;

  var hashA_536870919 = modInt(
    absInt(hash__pureZhashes_u782(item_p0)),
    maxValue_p2
  );
  var hashB_536870920 = modInt(
    absInt(hash__pureZhashes_u782(item_p0.concat([32, 98]))),
    maxValue_p2
  );
  result_536870918 = modInt(
    absInt(addInt(hashA_536870919, mulInt(n_p1, hashB_536870920))),
    maxValue_p2
  );

  return result_536870918;
}

function sysFatal__stdZassertions_u45(message_p1) {
  raiseException(
    {
      message: nimCopy(null, message_p1, NTI33554449),
      m_type: NTI134217745,
      parent: null,
      name: null,
      trace: [],
      up: null
    },
    "AssertionDefect"
  );
}

function raiseAssert__stdZassertions_u43(msg_p0) {
  sysFatal__stdZassertions_u45(msg_p0);
}

function failedAssertImpl__stdZassertions_u85(msg_p0) {
  raiseAssert__stdZassertions_u43(msg_p0);
}
if (!(hashN__nim95hash_u2([100, 117, 109, 109, 121], 0, 1) == 0)) {
  failedAssertImpl__stdZassertions_u85([
    110, 105, 109, 95, 104, 97, 115, 104, 46, 110, 105, 109, 40, 50, 54, 44, 32,
    51, 41, 32, 96, 104, 97, 115, 104, 78, 40, 34, 100, 117, 109, 109, 121, 34,
    44, 32, 48, 44, 32, 49, 41, 32, 61, 61, 32, 48, 96, 32
  ]);
}

// Nim source that was used to generate the above:
// ```nim
//  import hashes
//
// proc hashN*(item: string, n: int, maxValue: int): int =
//   ## Get the nth hash using Nim's built-in hash function using
//   ## the double hashing technique from Kirsch and Mitzenmacher, 2008:
//   ## http://www.eecs.harvard.edu/~kirsch/pubs/bbbf/rsa.pdf
//   let
//     hashA = abs(hash(item)) mod maxValue   # Use abs to handle negative hashes
//     hashB = abs(hash(item & " b")) mod maxValue # string concatenation
//   abs((hashA + n * hashB)) mod maxValue
//
// when defined(js):
//   # A dummy usage to keep `hashN` from being stripped:
//   doAssert hashN("dummy", 0, 1) == 0 # or just discard
// ```

// Below code was added manually
export function hashN(item, n, maxValue) {
  // Convert string to array of character codes
  const itemArray = Array.from(item).map((char) => char.charCodeAt(0));
  return hashN__nim95hash_u2(itemArray, n, maxValue);
}
